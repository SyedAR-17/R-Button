output$output_text <- renderText({
paste("Button clicked", x, "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
paste("Button clicked", x+1, "times.")
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=2
x=x+1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", x+1, "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
click_count(click_count() + 1)  # Increment the click count
})
observe({
if (!is.null(input$myButton) && input$myButton > 0) {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
}
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
#' rvsButton: Custom button component
#'
#' A custom button component with specific styling and behavior.
#'
#' @param inputId The input ID.
#' @param label The button label.
#' @param icon An optional icon for the button.
#' @param style An optional CSS style.
#'
#' @return An HTML button with specified styling and behavior.
#'
#' @export
rsvButton <- function(inputId, label, icon = NULL, style = NULL) {
html <- paste0(
'<button class="rsv-button" id="', inputId, '">',
if (!is.null(icon)) icon, ' ', label,
'</button>',
'<style>
.rsv-button {
width: 241.7px;
height: 61.58px;
background-color: #253F87;
border-radius: 8px;
border: none;
color: #000000;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 16px;
line-height: 61.58px;
cursor: pointer; /* Add cursor style */
}
.rsv-button:focus {
outline: none;
}
</style>'
)
# Register a click handler to send input value to Shiny
session$onSessionEnded(function() {
shinyjs::disable(selector = paste0("#", inputId))
})
HTML(html)
}
library(rsvButton)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
click_count(click_count() + 1)  # Increment the click count
})
observe({
if (!is.null(input$myButton) && input$myButton > 0) {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
}
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(rsvButton)
# Define the Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
div(
id = "myButton",
style = "width: 241.7px; height: 61.58px; background-color: #253F87; border-radius: 8px; border: none; color: #000000; text-align: center; text-decoration: none; font-size: 16px; line-height: 61.58px; cursor: pointer;",
"Click me"
),
textOutput("output_text")  # This will display the output
)
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
click_count(click_count() + 1)  # Increment the click count
shinyjs::disable("myButton")  # Disable the button after clicking
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
# Define the Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
div(
id = "myButton",
style = "width: 241.7px; height: 61.58px; background-color: #253F87; border-radius: 8px; border: none; color: #000000; text-align: center; text-decoration: none; font-size: 16px; line-height: 61.58px; cursor: pointer;",
"Click me"
),
textOutput("output_text")  # This will display the output
)
library(shiny)
library(rsvButton)
# Define the Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
div(
id = "myButton",
style = "width: 241.7px; height: 61.58px; background-color: #253F87; border-radius: 8px; border: none; color: #000000; text-align: center; text-decoration: none; font-size: 16px; line-height: 61.58px; cursor: pointer;",
"Click me"
),
textOutput("output_text")  # This will display the output
)
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
click_count(click_count() + 1)  # Increment the click count
shinyjs::disable("myButton")  # Disable the button after clicking
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
rsvButton <- function(inputId, label, icon = NULL, style = NULL) {
html <- paste0(
'<button class="rsv-button" id="', inputId, '">',
if (!is.null(icon)) icon, ' ', label,
'</button>',
'<script>
document.querySelector(".rsv-button").addEventListener("click", function() {
Shiny.setInputValue("', inputId, '", true);
});
</script>',
'<style>
.rsv-button {
width: 241.7px;
height: 61.58px;
background-color: #253F87;
border-radius: 8px;
border: none;
color: #000000;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 16px;
line-height: 61.58px;
}
.rsv-button:focus {
outline: none;
}
</style>'
)
HTML(html)
}
library(rsvButton)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui=ui, server=server)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui=ui, server=server)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui=ui, server=server)
#' rvsButton: Custom button component
#'
#' A custom button component with specific styling and behavior.
#'
#' @param inputId The input ID.
#' @param label The button label.
#' @param icon An optional icon for the button.
#' @param style An optional CSS style.
#'
#' @return An HTML button with specified styling and behavior.
#'
#' @export
rsvButton <- function(inputId, label, icon = NULL, style = NULL) {
html <- paste0(
'<button class="rsv-button" id="', inputId, '">',
if (!is.null(icon)) icon, ' ', label,
'</button>',
'<script>
// Track the number of clicks
var clickCount = 0;
document.querySelector(".rsv-button").addEventListener("click", function() {
clickCount++;
if (clickCount % 2 === 0) {
alert("This is an alert on every second click!");
}
});
</script>',
'<style>
.rsv-button {
width: 241.7px;
height: 61.58px;
background-color: #253F87;
border-radius: 8px;
border: none;
color: #ffffff;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 16px;
line-height: 61.58px;
}
.rsv-button:focus {
outline: none;
}
</style>'
)
HTML(html)
}
library(rsvButton)
# Load the custom rsvButton package
library(rsvButton)
library(shiny)
# Define the Shiny UI
ui <- fluidPage(
rsvButton("myButton", "Click me"),  # Use your custom rsvButton
textOutput("output_text")  # This will display the output
)
x=1
# Define the Shiny server
server <- function(input, output, session) {
click_count <- reactiveVal(0)  # Initialize a reactive value to count clicks
observeEvent(input$myButton, {
showModal(modalDialog(
title = "Button Clicked",
"You clicked the button!"
))
click_count(click_count() + 1)  # Increment the click count
})
output$output_text <- renderText({
paste("Button clicked", click_count(), "times.")
})
}
# Create and run the Shiny app
shinyApp(ui=ui, server=server)
runApp('R/Testing.R')
runApp('R/Testing.R')
html <- paste0(
'<button class="rsv-button" id="', inputId, '">',
if (!is.null(icon)) icon, ' ', label,
'</button>',
'<script>
// Track the number of clicks
var clickCount = 0;
document.querySelector(".rsv-button").addEventListener("click", function() {
clickCount++;
if (clickCount % 1 === 0) {
alert("This is an alert on every second click!");
}
});
</script>',
'<style>
.rsv-button {
width: 241.7px;
height: 61.58px;
background-color: #253F87;
border-radius: 8px;
border: none;
color: #ffffff;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 16px;
line-height: 61.58px;
}
.rsv-button:focus {
outline: none;
}
</style>'
)
#' rvsButton: Custom button component
#'
#' A custom button component with specific styling and behavior.
#'
#' @param inputId The input ID.
#' @param label The button label.
#' @param icon An optional icon for the button.
#' @param style An optional CSS style.
#'
#' @return An HTML button with specified styling and behavior.
#'
#' @export
rsvButton <- function(inputId, label, icon = NULL, style = NULL) {
html <- paste0(
'<button class="rsv-button" id="', inputId, '">',
if (!is.null(icon)) icon, ' ', label,
'</button>',
'<script>
// Track the number of clicks
var clickCount = 0;
document.querySelector(".rsv-button").addEventListener("click", function() {
clickCount++;
if (clickCount % 1 === 0) {
alert("This is an alert on every second click!");
}
});
</script>',
'<style>
.rsv-button {
width: 241.7px;
height: 61.58px;
background-color: #253F87;
border-radius: 8px;
border: none;
color: #ffffff;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 16px;
line-height: 61.58px;
}
.rsv-button:focus {
outline: none;
}
</style>'
)
HTML(html)
}
runApp('R/Testing.R')
runApp('R/Testing.R')
runApp('R/Testing.R')
runApp('R/Testing.R')
runApp('R/Testing.R')
